public class Kaynak {

    private int tuketimNo;
    private boolean uretimMi = true;

    // consumer çalıştırıyor
    public synchronized int getTuketimNo() {
        while (uretimMi) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        uretimMi = true;
        notify(); // consumer uyandırılıyor. / notify obje methodudur.

        return tuketimNo;
    }

    // producer kullanıyor.
    public synchronized void setTuketimNo(int tuketimNo) {
        while (!uretimMi) {
            try {
                // producer üretim yapmadan consumer tüketmeyecek
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println(tuketimNo + " degeri üretildi.");
        this.tuketimNo = tuketimNo;
        uretimMi = false;
        notify(); // producer uyandırılıyor. // notify obje methodudur.
    }
}

public class Producer implements Runnable {

    private Kaynak kaynak;

    public Producer(Kaynak kaynak) {
        this.kaynak = kaynak;
        Thread gorev = new Thread(this, "producer threadi");
        gorev.start();
    }

    @Override
    public void run() {
        int i = 0;
        while (true) {
            kaynak.setTuketimNo(i++);
        }
    }
}

public class Consumer implements Runnable {

    private Kaynak kaynak;

    public Consumer(Kaynak kaynak) {
        this.kaynak = kaynak;
        Thread gorev = new Thread(this, "consumer threadi");
        gorev.start();
    }

    @Override
    public void run() {
        int i = 0;
        while (true) {
            System.out.println(kaynak.getTuketimNo() + " deger tüketildi");
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Driver {
    public static void main(String[] args) {

        Kaynak kaynak = new Kaynak();

        new Producer(kaynak); // producer kaynağı dolduruyor
        new Consumer(kaynak); // consumer kaynağı tüketiyor
    }
}



Bu kod, üretici-tüketici problemi üzerine kurulu bir çoklu thread uygulamasıdır. Bu tür bir problem, iki tür threadin (üretici ve tüketici) ortak bir veri paylaşarak çalıştığı bir senaryoyu modellemektedir. Kodunuzda bu görevi üstlenen sınıflar şunlardır:

Kaynak (Resource) Sınıfı:

tuketimNo adında bir özel tüketim numarası değişkenine ve uretimMi adında bir bayrak değişkenine sahiptir.
getTuketimNo metodu, tüketim numarasını döndürür. Ancak, uretimMi bayrağı true olduğunda bekler (wait). Tüketici bu metodu çağırarak tüketim numarası alır ve uretimMi bayrağını false olarak ayarlar. Ardından diğer threadlere haber vermek için notify çağrısı yapar.
setTuketimNo metodu, bir tüketim numarasını alır ve uretimMi bayrağı false olduğunda bekler (wait). Ardından, tüketiciye tüketim numarasını atar, uretimMi bayrağını true olarak ayarlar ve diğer threadlere haber vermek için notify çağrısı yapar.
Producer (Üretici) Sınıfı:

Kaynak sınıfını alarak bir üretici thread oluşturur.
run metodu içinde sürekli olarak setTuketimNo metodunu çağırarak tüketim numarası üretir.
Consumer (Tüketici) Sınıfı:

Kaynak sınıfını alarak bir tüketici thread oluşturur.
run metodu içinde sürekli olarak getTuketimNo metodunu çağırarak tüketim numarası tüketir.
Driver (Sürücü) Sınıfı:

main metodu içinde Kaynak sınıfından bir nesne oluşturulur.
Bir üretici ve bir tüketici thread başlatılır.
Bu tasarım, üretici ve tüketici threadlerin veriyi güvenli bir şekilde paylaşmasını sağlamak için synchronized anahtar kelimesini kullanır. wait ve notify çağrıları, bir threadin diğerinin işini bitirmesini beklemek için kullanılır.
